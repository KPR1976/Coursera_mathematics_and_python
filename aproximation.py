"""
Рассмотрим сложную математическую функцию на отрезке [1, 15]:
f(x) = sin(x / 5) * exp(x / 10) + 5 * exp(-x / 2)

https://d3c33hcgiwev3.cloudfront.net/imageAssetProxy.v1/YzsaOcqaEeW9HA7NOZMxaw_3d529582665934cff77bbcf55a28e43c_image01.png?expiry=1521936000000&hmac=In0MfI1NO2ZqBQ653WhnURMuTXv5gDZPbVWK-fyAy60
Воспользуемся описанным свойством, и будем находить приближение функции многочленом, решая систему линейных уравнений.

Сформируйте систему линейных уравнений (то есть задайте матрицу коэффициентов A и свободный вектор b) для многочлена первой степени, который должен совпадать с функцией f в точках 1 и 15. Решите данную систему с помощью функции scipy.linalg.solve. Нарисуйте функцию f и полученный многочлен. Хорошо ли он приближает исходную функцию?
Повторите те же шаги для многочлена второй степени, который совпадает с функцией f в точках 1, 8 и 15. Улучшилось ли качество аппроксимации?
Повторите те же шаги для многочлена третьей степени, который совпадает с функцией f в точках 1, 4, 10 и 15. Хорошо ли он аппроксимирует функцию? Коэффициенты данного многочлена (четыре числа в следующем порядке: w_0, w_1, w_2, w_3) являются ответом на задачу. Округлять коэффициенты не обязательно, но при желании можете произвести округление до второго знака (т.е. до числа вида 0.42)
Запишите полученные числа в файл, разделив пробелами. Обратите внимание, что файл должен состоять из одной строки, в конце которой не должно быть переноса. Пример файла с решением вы можете найти в конце задания (submission-2.txt).
"""
import numpy as np
import scipy.linalg as scl
from math import sin, exp
import matplotlib.pyplot as plt

fx = lambda x: sin(x / 5.0) * exp(x / 10.0) + 5 * exp(-x / 2.0)

#многочлен первой степени w0 + w1 = fx(1) w0 + 15w1 = fx(15)
a = [[1, 1], [1, 15]]
b = [fx(1), fx(15)]
print(scl.solve(a, b))
plt.plot(scl.solve(a, b))
plt.show()
#многочлен второй степени
a = [[1, 1, 1], [1, 8, 64], [1, 15, 225]]
b = [fx(1), fx(8), fx(15)]
print(scl.solve(a, b))
plt.plot(scl.solve(a, b))
plt.show()
#многочлен третьей степени
a = [[1, 1, 1, 1], [1, 4, 16, 64], [1, 10, 100, 1000], [1, 15, 225, 3375]]
b = [fx(1), fx(4), fx(10), fx(15)]
print(scl.solve(a, b).round(2))
plt.plot(scl.solve(a, b))
plt.show()
print(fx(1), fx(4), fx(10), fx(15))
